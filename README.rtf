{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AndaleMono;\f2\fmodern\fcharset0 CourierNewPSMT;
\f3\fmodern\fcharset0 CourierNewPS-BoldMT;\f4\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red74\green0\blue255;\red221\green40\blue103;
\red38\green38\blue38;\red14\green110\blue109;\red172\green117\blue53;\red135\green136\blue117;\red217\green232\blue247;
}
\vieww12600\viewh14500\viewkind0
\deftab720
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs24 \cf0 Name:	J. Daniel Gonzalez\
UCID:	10058656\
Class:	CPSC 501\
Ass:		1\
\
\

\b Code base
\b0 : The code base I chose to use for this assignment is the java project \'93Bartender\'94, a (terrible) program that I wrote specifically for this assignment. The program runs a \'93bartender\'94 that serves the user drinks and may learn to make new drinks. It also does not serve alcoholic drinks to underage users. \
\

\b Version control
\b0 : The version control system I chose to use for this assignment is git.\
Initial commits:\cf2 \
	First commit in the repository: 
\f1 4cd43cc361d43339e069800ef918a2df71fe738c
\f0 \
	\'93Real\'94 first commit: 
\f1 b4345f357a315a4adf0c64bee6cd5e7de99ff68f
\f0 \
		-i.e. the first commit with the complete code that I began to refactoring\cf0 \
\

\b Final commit
\b0 :  \
\

\b \ul Report
\b0 :\
\ulnone \

\b Refactoring 1
\b0 : 
\b \
\

\b0 Upon first seeing the program, the first bad code smell that I immediately spotted is the "
\i Large Class
\i0 " smell. The Main class was very large, and there was only one grotesquely long main method in that large class. The first refactoring I chose to perform on this code was none other than "
\i Extract Method
\i0 ". The largest, most jarringly out of place block of code in the program was the large while loop spanning lines 46 to 120. I chose this loop as the starting point and extracted the method Run() by taking all the code in this loop.\
\
This refactoring shortened the main method to 1/3 of its original size and improved the usability and readability of the code. It allows for further \'93
\i Extract Method
\i0 \'94 refactorings within the Run() method. As it is difficult to test console input and output without using third party libraries, I tested that the code worked the same by running the following test scripts in both the original program and the refactored:\
\
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf0 Please enter your age.\
>sdfsdf\
That's not a valid age, try again.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 Please enter your age.
\f0\fs24 \
\
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf0 Please enter your age.\
>12\
Welcome to Bartendtron 2000, please select an option. Use "list" to display options.\
>order Whiskey\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 You're not old enough to drink Whiskey
\f0\fs24 \
\
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf0 Please enter your age.\
>18\
Welcome to Bartendtron 2000, please select an option. Use "list" to display options.\
>learn\
Invalid command, type "list" to see valid commands\
>teach Milk false\
Milk learned!\
>order Milk\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 The bartender gives you a Milk
\f0\fs24 \
\
The commit corresponding to this refactoring is: 
\f1 \cf3 \CocoaLigature0 3722375
\f0 \cf0 \CocoaLigature1 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\b \cf0 Refactoring 1.5
\b0 :\
Looking again at the code, I noticed again the bad smell "
\i Large Class
\i0 " and decided that it required another "Extract Method" refactoring, this time on the other while loop\cf2  that propts for the user's age. This was an small refactoring that did not change the code base significantly, but it did reduce the size of the main method to be more manageable.\
\
I tested this refactoring by creating the JUnit test  
\f3\b\fs20 TestGetSomeInformationFromUser() 
\f0\b0\fs24 within MainTest.java.\
\
\cf0 A code fragment that illustrates the efficacy of this refactoring is the following:\
\

\b Original
\b0 :\
\
\pard\pardeftab720\partightenfactor0

\f4\fs22 \cf4 	\cf2 public static void main(String[] args) 	\
	\{\
\pard\pardeftab720\partightenfactor0
\cf0 		<more code>\cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \

\f4\fs22 		int age;\
		\
		Scanner \ul in\ulnone  = new Scanner(System.in);\
		String input;\
		\
		//get user's age\
		while (true) \{\
			System.out.println("Please enter your age."); 	            \
			input = in.next();\
	        try \{\
	        	age = Integer.parseInt(input);\
	                break;\
	        \} \
	        catch (Exception e) \{\
	        	System.out.println("That's not a valid age, try again.");\
	        \}\
\
		\cf0 <more code>\cf2 \
	\}
\f0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf2 \

\b Refactored
\b0 :\
\
\pard\pardeftab720\partightenfactor0

\f4\fs22 \cf2 	public static int getSomeInformationFromUser(Scanner in)\{\
		\
		//get user's age\
		int age;\
		while (true) \{\
			System.out.println("Please enter your age."); 	            \
			String input = in.next();\
	        try \{\
	        	age = Integer.parseInt(input);\
	            break;\
	        \} \
	        catch (Exception e) \{\
	        	System.out.println("That's not a valid age, try again.");\
	        \}\
		\}\
		return age;\
	\}
\f0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf2 \
This illustrates better structured, OOP code due to encapsulation and improved reality. \
\
\cf0 The commit corresponding to this refactoring is: 
\f1 \cf3 \CocoaLigature0 307cd86
\f0 \cf0 \CocoaLigature1 \
\

\b Refactoring 2
\b0 :\
After completing the above refactorings and making the code significantly more readable, the next bad smell that caught my eye was the "
\i Method name that does not reveal its purpose
\i0 ", in the getSomeInformationFromUser() method that I introduced above. I proceeded to \'93
\i Rename Method
\i0 \'94 to getUserAge(). I updated the references to this method both in Main and in TestMain. This refactoring made the code more readable and self-explanatory.\
\
I ran the updated JUnit test for getSomeInformationFromUser() and found that both methods passed the test as expected. I proceeded to rename the Unit to TestgetUserData().\
\
The commit corresponding for this refactoring is: 
\f1 \cf3 \CocoaLigature0 5fc27b2
\f0 \cf0 \CocoaLigature1 \
\

\b Refactoring 3
\b0 :\
After performing the above refactorings, I felt better about the state of the program. However, upon looking at the new methods and noticing that they were all refered to by an overarching "Bartender", the bad code smell of "
\i Large Class
\i0 " came back again, seeing as the entire program in written in one main class. The entire program did not need to be written in one Main class, as that completely forsakes good object oriented programming practice. The major refactoring I chose to apply to remedy this bad smell is "
\i Extract Class
\i0 ". I started by taking a look at the code within Run() and noticed that the entirety of the code deals with the bartender and his actions. In a good OOP program, the bartender would be a self-contained class, and that is how I made it. \
\
Due to the difficulty of console input/output testing, I tested that this refactoring did not break any functionality or cause any unexpected changes by running the same script as in 
\b Refactoring 1
\b0 . \
\
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf0 Please enter your age.\
>sdfsdf\
That's not a valid age, try again.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 Please enter your age.
\f0\fs24 \
\
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf0 Please enter your age.\
>12\
Welcome to Bartendtron 2000, please select an option. Use "list" to display options.\
>order Whiskey\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 You're not old enough to drink Whiskey
\f0\fs24 \
\
\pard\pardeftab720\partightenfactor0

\f2\fs20 \cf0 Please enter your age.\
>18\
Welcome to Bartendtron 2000, please select an option. Use "list" to display options.\
>learn\
Invalid command, type "list" to see valid commands\
>teach Milk false\
Milk learned!\
>order Milk\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 The bartender gives you a Milk
\f0\fs24 \
\
This refactoring served to reduce the size of the Main class by 2/3 and began to make the program conform to OOP practices.\
\
The commit corresponding for this refactoring \cf2 is: 
\f1 \cf3 \CocoaLigature0 6bc83c8
\f0 \cf0 \CocoaLigature1 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\b \cf0 Refactoring 3.5
\b0 :\
\
Now that all code specific to the Bartender object has been moved into the Bartender class and I\'92ve tested that the change have not introduced any new bugs or unintended side effects, I can scan the Bartender class to find my next refactoring. One of the first bad smells that one notices when reading the code in the while loop is the \'93
\i Large Method
\i0 \'94 smell, caused by the fact that the entirety of the code for each of the commands available to the user is within one function. I chose to use \'93
\i Extract Method
\i0 \'94 on each command. The functions I extracted out are:\
\

\b Refactoring 3.5.1
\b0  teach(): 
\f1 \cf3 \CocoaLigature0 5dfdc47
\f0 \cf0 \CocoaLigature1 \
\
The changes made to teach, to illustrate the style of the refactorings:\
\

\b Original
\b0 :\

\b 	Within Run()
\b0 :\
				
\f4 \cf2 <more code>\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 			else if (input.\strokec6 contains\strokec5 (\strokec7 "teach"\strokec5 ))\{\
				\
					\strokec8 //parsing string\strokec5 \
				String drinkName = in.\strokec6 next\strokec5 ();\
				try \{\
					drinks.\strokec6 put\strokec5 (drinkName,Boolean.\strokec6 parseBoolean\strokec5 (in.\strokec6 next\strokec5 ()));  \
						\
					System.\strokec6 out\strokec5 .\strokec6 println\strokec5 (drinkName + \strokec7 " learned!"\strokec5 );\
				\}\
				catch (Exception e)\{\
					System.\strokec6 out\strokec5 .\strokec6 println\strokec5 (\strokec7 "Invalid teaching format."\strokec5 );\
				\}\
			\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 			\
				<more code>
\f0 \cf0 \
\

\b Refactored
\b0 :\
	
\b Within Run()
\b0 :\
				
\f4\fs22 <more code>
\f0\fs24 \
\cf2 \
	
\f4\fs22 			else if (input.contains("teach"))\{\
\pard\pardeftab720\partightenfactor0
\cf2 					\
				String output = teach(in);\
				System.out.println(output);\
			\}\
		\
			<more code>
\f0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f4\fs22 \cf9 	\cf2 public String teach(Scanner in)\{\
			//parsing string\
		String drinkName = in.next();\
		try \{\
			drinks.put(drinkName,Boolean.parseBoolean(in.next()));  \
										\
			return (drinkName + " learned!");\
		\}\
		catch (Exception e)\{\
			return "Invalid teaching format.";\
		\}\
	\}
\f0\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\b \cf0 Refactoring 3.5.2 
\b0 order():  
\f1 \cf3 \CocoaLigature0 ef44a64
\f0 \cf0 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\b \cf0 Refactoring 3.5.3 
\b0 menu(): 
\f1 \cf3 \CocoaLigature0 c036262
\f0 \cf0 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0
\cf0 \
Each of the above implicitly used the \'93
\i Add Parameter
\i0 \'94 refactoring due to requiring the input scanner for their new methods. However this was more for simplifying testing purposes rather than truly improving code structure or readability, and thus I did not include it as one of my main refactorings\
\
Each of the above functions was tested with the JUnit tests TestTeach(), TestOrder(), TestMenu() respectively. The JUnit tests demonstrate that any bugs present in the original code (such as the incorrect error checking in \'93teach\'94 or the fact that you can input a negative age in \'93age\'94) are still there after the structuring, because refactoring should maintain the functionality of the code.\
\
The extraction of these methods made the source code more readable and self-documenting, allowing for easier future maintenance of the code.\
\

\b Refactoring 4
\b0 : \
\
Another bad smell visible when looking at the order() method was that now the code is self-contained within a method, the variable drinkSeen is not entirely unused after declaration. I removed all usage of this variable with \'93
\i Remove Redundant Variable
\i0 \'94, or \'93
\i Remove Control Flag
\i0 \'94 (as this was the original purpose of this variable) within the method entirely to improve code readability and reduce length. The code was tested by running the unit tests previously written for order(), and as these tests still passed, I\'92ve concluded that this refactoring has changed neither the functionality of the code nor introduced unforeseen consequences. \
\
The commit corresponding to this refactoring is: 
\f1 \cf3 \CocoaLigature0 925eed4
\f0 \cf0 \CocoaLigature1 \
\

\b Refactoring 5
\b0 :\
\
Within the Main class, a possible bad code smell is the fact that drinks is a public field that should be private, and as such the \'93
\i Encapsulate Field
\i0 \'94 refactoring should be used. As no accessors or mutators are required for this field (because after its initial set up within main() it is never accessed again other than through the build in map methods), none were added and the field was simply changed to private.\
\
This change does not affect any other parts of the code, and the fact that the program compiles and runs while passing all of the previous unit test after this change is indicator to this fact. \
\
The commit corresponding to this refactoring is: 
\f1 \cf3 \CocoaLigature0 07388f5
\f0 \cf0 \CocoaLigature1 \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0

\b \cf0 \
}